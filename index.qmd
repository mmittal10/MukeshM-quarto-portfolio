---
title: "Simple Matplotlib Graph"
author: "Mukesh M"
date: today
format: html
---

# Simple Matplotlib Example

## What is Matplotlib?

Matplotlib is a comprehensive Python library for creating static, animated, and interactive visualizations. It was originally created by John D. Hunter in 2003 and has become the de facto standard for data visualization in Python.

### Why is Matplotlib Useful?

Matplotlib is particularly valuable because:

- **Versatility**: It can create a wide variety of plot types including line plots, scatter plots, bar charts, histograms, heatmaps, and more
- **Integration**: Works seamlessly with other Python libraries like NumPy, Pandas, and Jupyter notebooks
- **Customization**: Offers extensive customization options for colors, styles, labels, and layouts
- **Publication Quality**: Produces high-quality figures suitable for scientific publications and presentations
- **Cross-Platform**: Works consistently across different operating systems
- **Active Community**: Large community support with extensive documentation and examples

Matplotlib is especially powerful when used in Quarto documents, as it allows you to embed dynamic, data-driven visualizations directly in your reports and publications.

This document demonstrates a basic matplotlib graph in Quarto.

## Basic Line Plot

Here's a simple line plot using matplotlib:

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Generate sample data
x = np.linspace(0, 10, 50)
y = np.sin(x)

# Create the plot
plt.figure(figsize=(8, 5))
plt.plot(x, y, 'b-', linewidth=2)
plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('Simple Sine Wave')
plt.grid(True)
plt.show()
```

This creates a basic sine wave plot with proper labels and grid.

## Scatter Plot with Random Data

Here's a scatter plot showing random data points:

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Generate random data points
np.random.seed(42)  # For reproducible results
x = np.random.randn(100)
y = np.random.randn(100)
colors = np.random.rand(100)
sizes = 1000 * np.random.rand(100)

# Create the scatter plot
plt.figure(figsize=(10, 6))
scatter = plt.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='viridis')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('Scatter Plot with Random Data Points')
plt.colorbar(scatter, label='Color intensity')
plt.grid(True, alpha=0.3)
plt.show()
```

This scatter plot shows 100 random data points with varying colors and sizes.

## Pie Chart Example

Here's a pie chart showing sample data distribution:

```{python}
import matplotlib.pyplot as plt

# Sample data
labels = ['Python', 'JavaScript', 'Java', 'C++', 'Go', 'Other']
sizes = [35, 25, 15, 10, 8, 7]
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99cc', '#c2c2f0']
explode = (0.1, 0, 0, 0, 0, 0)  # explode Python slice

# Create the pie chart
plt.figure(figsize=(10, 8))
wedges, texts, autotexts = plt.pie(sizes, explode=explode, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True, startangle=90)

# Enhance the appearance
plt.setp(autotexts, size=10, weight="bold")
plt.title('Programming Language Popularity Distribution', fontsize=16, fontweight='bold')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle

plt.show()
```

This pie chart displays the distribution of programming languages with custom colors and highlighting the most popular language (Python).
